/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.stockops.UI.Brokers;

import com.stockops.Brokerage.EquityBroker;
import com.stockops.Brokerage.EquityBuyRequest;
import com.stockops.Brokerage.EquitySellRequest;
import com.stockops.Business.EcoSystem;
import com.stockops.Establishments.Company;
import com.stockops.Investor.EquityHoldings;
import com.stockops.Investor.InvestorAbstract;
import com.stockops.Investor.RetailInvestor;
import com.stockops.Market.Equity;
import com.stockops.Users.UserAccount;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author manju
 */
public class EquityBrokerJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BrokerageModeratorJPanel
     */
    EcoSystem business;
    UserAccount account;
    EquityBroker equityBroker;
    EquitySellRequest equitySellRequest;
    EquityBuyRequest equityBuyRequest;
    public EquityBrokerJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem business) {
        this.business=business;
        this.account=account;
        this.equityBroker=(EquityBroker)account.getUser();
        initComponents();
        populateBuyRequestTable();
        populateSellRequestTable();
        populateSharesTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBuyReq = new javax.swing.JTable();
        btnBuy = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSellRequests = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnSell = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableShares = new javax.swing.JTable();

        jLabel1.setText("Title");

        tblBuyReq.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        tblBuyReq.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Username", "Company Name", "Quotated Buy Price", "Qty Request", "Approval Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBuyReq.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBuyReqMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblBuyReq);

        btnBuy.setText("Buy");
        btnBuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuyActionPerformed(evt);
            }
        });

        tblSellRequests.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        tblSellRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Username", "Company Name", "Quotated Sell Price", "Qty Request", "Approval Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSellRequests.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSellRequestsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblSellRequests);

        jLabel2.setText("Buy Request");

        jLabel3.setText("Sell Request");

        btnSell.setText("Sell");
        btnSell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSellActionPerformed(evt);
            }
        });

        tableShares.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        tableShares.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Company Name", "Symbol", "Price Per Share", "Stock Qty", "Available Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableShares);
        if (tableShares.getColumnModel().getColumnCount() > 0) {
            tableShares.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 759, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 759, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 759, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(359, 359, 359)
                        .addComponent(btnBuy, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(365, 365, 365)
                        .addComponent(btnSell))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(406, 406, 406)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(121, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBuy, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSell, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuyActionPerformed
        EquityBuyRequest buyRequest = this.equityBroker.getEquityBuyRequestById(Integer.parseInt(String.valueOf(tblBuyReq.getValueAt(tblBuyReq.getSelectedRow(), 0))));
        EquityHoldings holdingToAdd = new EquityHoldings();
        Boolean addNewFlag =true;
        InvestorAbstract buyer=new InvestorAbstract();
        if(buyRequest.getEquity().getAvailableQuantity()>buyRequest.getQuantity()){
            
            if(buyRequest.getBuyer() instanceof RetailInvestor){
                buyer = (RetailInvestor)buyRequest.getBuyer();
            }
            else if(buyRequest.getBuyer() instanceof Company){
                buyer = (Company)buyRequest.getBuyer();
            }
            for(EquityHoldings equityHoldings:buyer.getEquityHoldings()){
                if(equityHoldings.getEquity()==buyRequest.getEquity()){
                    holdingToAdd=equityHoldings;
                    addNewFlag=false;
                }
            }
            double price = ((holdingToAdd.getBuyingPrice()*holdingToAdd.getQuantity())+(buyRequest.getQuantity()*buyRequest.getEquity().getPrice()))/(holdingToAdd.getQuantity()+buyRequest.getQuantity());
            holdingToAdd.setQuantity(holdingToAdd.getQuantity()+buyRequest.getQuantity());
            holdingToAdd.setBuyingPrice(price);
            buyRequest.getEquity().setAvailableQuantity(buyRequest.getEquity().getAvailableQuantity()-buyRequest.getQuantity());
            if(addNewFlag){
                holdingToAdd.setEquity(buyRequest.getEquity());
                buyer.getEquityHoldings().add(holdingToAdd);
            }
            this.equityBroker.getBuyRequests().remove(buyRequest);
            
        }
        else{
            JOptionPane.showMessageDialog(this, "Allotment quantity requested too high");
        }
        populateSharesTable();
        populateBuyRequestTable();
        populateSellRequestTable();
        
    }//GEN-LAST:event_btnBuyActionPerformed

    private void tblSellRequestsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSellRequestsMouseClicked
        Equity equityToSell = this.business.getMarket().getEquityMarket().getEquityByName(String.valueOf(tblSellRequests.getValueAt(tblSellRequests.getSelectedRow(), 2)));
//        txtSellingShare.setText(equityToSell.getCompany().getName());
        int sellRequestId = Integer.parseInt(String.valueOf(tblSellRequests.getValueAt(tblSellRequests.getSelectedRow(), 0)));
        this.equitySellRequest = this.equityBroker.getEquitySellRequestById(sellRequestId);
    }//GEN-LAST:event_tblSellRequestsMouseClicked

    private void tblBuyReqMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBuyReqMouseClicked
        Equity equityToBuy = this.business.getMarket().getEquityMarket().getEquityByName(String.valueOf(tblBuyReq.getValueAt(tblBuyReq.getSelectedRow(), 2)));
        int buyRequestId = Integer.parseInt(String.valueOf(tblBuyReq.getValueAt(tblBuyReq.getSelectedRow(), 0)));
        this.equityBuyRequest = this.equityBroker.getEquityBuyRequestById(buyRequestId);
    }//GEN-LAST:event_tblBuyReqMouseClicked

    private void btnSellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSellActionPerformed
        EquitySellRequest sellRequest = this.equityBroker.getEquitySellRequestById(Integer.parseInt(String.valueOf(tblSellRequests.getValueAt(tblSellRequests.getSelectedRow(), 0))));
        EquityHoldings holdingToSell = new EquityHoldings();
        for(EquityHoldings equityHoldings:((RetailInvestor)sellRequest.getSeller()).getEquityHoldings()){
            if(equityHoldings.getEquity()==sellRequest.getEquity()){
                holdingToSell=equityHoldings;
            }
        }
        holdingToSell.setQuantity(holdingToSell.getQuantity() - sellRequest.getQuantity());
        if(holdingToSell.getQuantity()==0){
            ((RetailInvestor)sellRequest.getSeller()).getEquityHoldings().remove(holdingToSell);
        }
        sellRequest.getEquity().setAvailableQuantity(sellRequest.getEquity().getAvailableQuantity()+sellRequest.getQuantity());
        this.equityBroker.getSellRequests().remove(sellRequest);
        
        populateSharesTable();
        populateBuyRequestTable();
        populateSellRequestTable();
    }//GEN-LAST:event_btnSellActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuy;
    private javax.swing.JButton btnSell;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tableShares;
    private javax.swing.JTable tblBuyReq;
    private javax.swing.JTable tblSellRequests;
    // End of variables declaration//GEN-END:variables

    private void populateBuyRequestTable() {
        DefaultTableModel model = (DefaultTableModel) tblBuyReq.getModel();
        model.setRowCount(0);
        for(EquityBuyRequest equityBuyRequest: this.equityBroker.getBuyRequests()){
            Object[] row= new Object[6];
            row[0]=equityBuyRequest.getId();
            row[1]=equityBuyRequest.getBuyer().getName();
            row[2]=equityBuyRequest.getEquity().getCompany().getName();
            row[3]=equityBuyRequest.getEquity().getPrice();
            row[4]=equityBuyRequest.getQuantity();
            row[5]="pending";
            model.addRow(row);
        }
    }

    private void populateSellRequestTable() {
        DefaultTableModel model = (DefaultTableModel) tblSellRequests.getModel();
        model.setRowCount(0);
        for(EquitySellRequest equitySellRequest: this.equityBroker.getSellRequests()){
            Object[] row= new Object[6];
            row[0]=equitySellRequest.getId();
            row[1]=equitySellRequest.getSeller().getName();
            row[2]=equitySellRequest.getEquity().getCompany().getName();
            row[3]=equitySellRequest.getEquity().getPrice();
            row[4]=equitySellRequest.getQuantity();
            row[5]="pending";
            model.addRow(row);
        }
    }
    
    private void populateSharesTable(){
        DefaultTableModel model = (DefaultTableModel) tableShares.getModel();
        model.setRowCount(0);
        for(Equity equity: this.business.getMarket().getEquityMarket().getEquityList()){
            Object[] row= new Object[5];
            row[0]=equity.getCompany().getName();
            row[1]=equity.getSymbol();
            row[2]=equity.getPrice();
            row[3]=equity.getStockQuantity();
            row[4]=equity.getAvailableQuantity();
            model.addRow(row);
        }
    }
}
